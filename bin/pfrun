#!/usr/bin/env bash
#**********************************************************************
# LLNS Copyright Start
# Copyright (c) 2022, Lawrence Livermore National Security
# This work was performed under the auspices of the U.S. Department 
# of Energy by Lawrence Livermore National Laboratory in part under 
# Contract W-7405-Eng-48 and in part under Contract DE-AC52-07NA27344.
# Produced at the Lawrence Livermore National Laboratory.
# All rights reserved.
# For details, see the LICENSE file.
# LLNS Copyright End
#**********************************************************************
#
# Run Parflow Python or TCL script based on file extension.
# 
#**********************************************************************

set -e  # Abort script at first error
set -u  # Attempt to use undefined variable outputs error message, and forces an exit
set -o pipefail  # Causes a pipeline to return the exit status of the last command in the pipe that returned a non-zero return value.

#-----------------------------------------------------------------------------
# Program usage 
#-----------------------------------------------------------------------------
function usage () {
  cat << EOF
Usage: $(basename "${BASH_SOURCE[0]}") [-h] [-v] [-f] -p param_value arg1 [arg2...]

Script description here.

Available options:

	  -h, --help      Print this help and exit
	  -v, --verbose   Verbose output
	  --debug         Show each shell command as it is executed, warning very verbose
EOF
  exit
}

function init_colors() {
  if [[ -t 2 ]] && [[ -z "${NO_COLOR-}" ]] && [[ "${TERM-}" != "dumb" ]]; then
    NOFORMAT='\033[0m' RED='\033[0;31m' GREEN='\033[0;32m' ORANGE='\033[0;33m' BLUE='\033[0;34m' PURPLE='\033[0;35m' CYAN='\033[0;36m' YELLOW='\033[1;33m'
  else
    NOFORMAT='' RED='' GREEN='' ORANGE='' BLUE='' PURPLE='' CYAN='' YELLOW=''
  fi
}

#=============================================================================
# Logging
#=============================================================================
function log () {
   if [ ${VERBOSE} -eq 1 ]
   then
      echo -e "$@"
   fi
}

#=============================================================================
# Error
#=============================================================================
function error () {
   echo >&2 -e "$@"
   exit -1
}

#=============================================================================
# Parse users arguments
#=============================================================================
function parse_arguments () {
   # Default arguments 
   VERBOSE=0
   NO_COLOR=0

   while :; do
      case "${1-}" in
	 -h | --help)
	    usage ;;
	 -v | --verbose)
	    VERBOSE=1
	    ;;
	 --debug)
	    set -x  # Show each command
	 ;;
      --no-color)
	 NO_COLOR=1
	 ;;
      -?*)
	 error "Unknown option: $1"
	 ;;
      *)
	 break
	 ;;
      esac
      shift
   done

   args=("$@")

   # check required params and arguments
   [[ ${#args[@]} -lt 1 ]] && error "Missing name of Python or TCL script to execute"

   script_filename=${args[0]}
   shift
   
   args=("$@")

   init_colors
}

parse_arguments "$@"

ext="${script_filename##*.}"

log "Running ${script_filename} ${args[@]}"

case ${ext} in
   tcl)
      tclsh "${script_filename}" "${args[@]}"
      ;;

   py)
      pfpython "${script_filename}" "${args[@]}"
      ;;
   *)
      error "Error <$file> is not a TCL or Python script"
      ;;
esac
     



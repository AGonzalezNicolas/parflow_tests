env:
  matrix:
    - PF_BUILD=cmake

language: cpp
sudo: required
dist: trusty
compiler:
  - gcc
os:
  - linux
addons:
  sources:
    - ubuntu-toolchain-r-test
  apt:
    packages:
    - cmake

before_install:
# Set up ParFlow dependencies
  - echo $LANG
  - echo $LC_ALL
  - test -n $CC  && unset CC
  - test -n $CXX && unset CXX
  - sudo apt-get update -qq
  - sudo apt-get install -y gfortran
  # - sudo apt-get install -y libhypre-2.8.0b libhypre-dev
  # - sudo apt-get install -y libsilo-bin  libsilo-dev
  - sudo apt-get install -y libhdf5-openmpi-dev libhdf5-openmpi-7 hdf5-helpers
  - sudo apt-get install -y tcl-dev tk-dev
  # - sudo apt-get install -y openmpi-bin openmpi-doc libopenmpi-dev
  - "[[ $PF_BUILD != 'cmake' ]] || if [[ ! -f cmake-3.17.0-Linux-x86_64/bin/cmake ]]; then wget --no-check-certificate http://cmake.org/files/v3.17/cmake-3.17.0-Linux-x86_64.tar.gz && tar -xvf cmake-3.17.0-Linux-x86_64.tar.gz; fi"

# Update GCC
  - sudo apt-get install -y software-properties-common
  - sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
  - sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 78BD65473CB3BD13
  - sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 6B05F25D762E3157
  - sudo apt update -qq
  - sudo apt install -y gcc-8
  - sudo apt install -y g++-8
  - sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-8 60 --slave /usr/bin/g++ g++ /usr/bin/g++-8

# Set up CUDA
  - CUDA_SHORT=10.1
  - CUDA_VER=10.1.105-1   
  - wget http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1404/x86_64/cuda-repo-ubuntu1404_${CUDA_VER}_amd64.deb
  - sudo dpkg -i cuda-repo-ubuntu1404_${CUDA_VER}_amd64.deb
  - sudo apt-key adv --fetch-keys http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1404/x86_64/7fa2af80.pub
  - sudo apt update -qq
  - sudo apt install -y cuda-core-${CUDA_SHORT/./-} cuda-cudart-dev-${CUDA_SHORT/./-} cuda-nvtx-${CUDA_SHORT/./-}
  - export CUDA_HOME=/usr/local/cuda-${CUDA_SHORT}
  - export LD_LIBRARY_PATH=${CUDA_HOME}/lib64:${LD_LIBRARY_PATH}
  - sudo ln -s $CUDA_HOME/lib64/stubs/libcuda.so $CUDA_HOME/lib64/libcuda.so.1
  - export PATH=${CUDA_HOME}/bin:${PATH}

# Set up UCX for OpenMPI
  - sudo apt install -y autoconf
  - sudo apt install -y automake 
  - sudo apt install -y libtool
  - sudo apt install -y maven
  - git clone https://github.com/openucx/ucx.git
  - cd ucx
  - ./autogen.sh
  - ./contrib/configure-release --prefix=$TRAVIS_BUILD_DIR/ucx-cuda-install --with-cuda=$CUDA_HOME --disable-numa
  - sudo make -j8 install
  - cd ..

# Set up OpenMPI
  - wget https://download.open-mpi.org/release/open-mpi/v4.0/openmpi-4.0.3.tar.gz && tar -xvf openmpi-4.0.3.tar.gz 
  - cd openmpi-4.0.3
  - ./configure --with-cuda=$CUDA_HOME --with-ucx=$TRAVIS_BUILD_DIR/ucx-cuda-install
  - sudo make -j8 install
  - sudo ldconfig
  - cd ..

# Set up Hypre
  - wget https://computing.llnl.gov/projects/hypre-scalable-linear-solvers-multigrid-methods/download/hypre-2.11.2.tar.gz && tar -xvf hypre-2.11.2.tar.gz
  - cd hypre-2.11.2/src
  - ./configure
  - make install
  - export HYPRE_ROOT=`pwd`/hypre
  - cd ../..

#Set up Silo
  - wget https://wci.llnl.gov/content/assets/docs/simulation/computer-codes/silo/silo-4.10.2/silo-4.10.2.tar.gz && tar -xvf silo-4.10.2.tar.gz
  - cd silo-4.10.2
  - ./configure
  - make install
  - export SILO_ROOT=`pwd`
  - cd ..

# Set up RMM
  - git clone --recurse-submodules https://github.com/rapidsai/rmm.git
  - cd rmm
  - export RMM_ROOT=`pwd`
  - git checkout branch-0.10
  - mkdir $RMM_ROOT/build/
  - cd $RMM_ROOT/build/
  - ../../cmake-3.17.0-Linux-x86_64/bin/cmake .. -DCMAKE_INSTALL_PREFIX=$RMM_ROOT
  - make -j
  - make install
  - cd ../..
  - sudo apt update -qq

before_script:
  - cd $TRAVIS_BUILD_DIR
  - export CC=mpicc && export CXX=mpicxx && export F77=mpif77 && export FC=mpif90
  - export OMPI_MCA_rmaps_base_oversubscribe=1
  - echo "PF_BUILD = $PF_BUILD"

  # Build with CUDA
  # - export PARFLOW_DIR=$TRAVIS_BUILD_DIR/install_cuda && mkdir -p $PARFLOW_DIR
  # - "[[ $PF_BUILD != 'cmake' ]] || (mkdir -p $TRAVIS_BUILD_DIR/build_cuda && cd $TRAVIS_BUILD_DIR/build_cuda && ../cmake-3.17.0-Linux-x86_64/bin/cmake .. -DCMAKE_BUILD_TYPE=Release -DPARFLOW_AMPS_LAYER=cuda -DPARFLOW_AMPS_SEQUENTIAL_IO=true -DPARFLOW_ENABLE_TIMING=TRUE -DPARFLOW_HAVE_CLM=ON -DHYPRE_ROOT=$HYPRE_ROOT -DPARFLOW_ENABLE_HYPRE=true -DPARFLOW_ENABLE_HDF5=true -DSILO_ROOT=$SILO_ROOT -DPARFLOW_ENABLE_SILO=true -DCMAKE_INSTALL_PREFIX=$PARFLOW_DIR -DPARFLOW_ENABLE_CUDA=TRUE)"
  # - "[[ $PF_BUILD != 'cmake' ]] || (cd $TRAVIS_BUILD_DIR/build_cuda && make && make install)"

  # Build without CUDA
  - export PARFLOW_DIR=$TRAVIS_BUILD_DIR/install && mkdir -p $PARFLOW_DIR
  - "[[ $PF_BUILD != 'cmake' ]] || (mkdir -p $TRAVIS_BUILD_DIR/build && cd $TRAVIS_BUILD_DIR/build && ../cmake-3.17.0-Linux-x86_64/bin/cmake .. -DCMAKE_BUILD_TYPE=Release -DPARFLOW_AMPS_LAYER=mpi1 -DPARFLOW_AMPS_SEQUENTIAL_IO=true -DPARFLOW_ENABLE_TIMING=TRUE -DPARFLOW_HAVE_CLM=ON -DHYPRE_ROOT=$HYPRE_ROOT -DPARFLOW_ENABLE_HYPRE=true -DPARFLOW_ENABLE_HDF5=true -DSILO_ROOT=$SILO_ROOT -DPARFLOW_ENABLE_SILO=true -DCMAKE_INSTALL_PREFIX=$PARFLOW_DIR)"
  - "[[ $PF_BUILD != 'cmake' ]] || (cd $TRAVIS_BUILD_DIR/build && make && make install)"
  - "[[ $PF_BUILD != 'autoconf' ]] || (mkdir -p build.pfsimulator && cd build.pfsimulator && ../pfsimulator/configure --prefix=$PARFLOW_DIR --with-amps=mpi1 --with-hypre --with-silo --with-clm)"
  - "[[ $PF_BUILD != 'autoconf' ]] || (mkdir -p build.pftools && cd build.pftools  && ../pftools/configure --prefix=$PARFLOW_DIR --with-amps=mpi1 --with-silo)"
  - "[[ $PF_BUILD != 'autoconf' ]] || (cd build.pfsimulator && make)"
  - "[[ $PF_BUILD != 'autoconf' ]] || (cd build.pftools && make)"

script:
  - "[[ $PF_BUILD != 'cmake' ]]    || (cd $TRAVIS_BUILD_DIR/build && make test)"
  - "[[ $PF_BUILD != 'autoconf' ]] || (cd test && make)"

after_failure:
  - cat $TRAVIS_BUILD_DIR/build/Testing/Temporary/LastTest.log 
  

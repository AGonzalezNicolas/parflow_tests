dnl
dnl File:        configure.in
dnl Package:     Parflow build system
dnl Copyright:   (c) 1997-2008 Lawrence Livermore National Security, LLC
dnl Revision:    $LastChangedRevision: 2228 $
dnl Modified:    $LastChangedDate: 2008-06-24 15:06:53 -0700 (Tue, 24 Jun 2008) $
dnl Description: autoconfig configuration file
dnl

AC_INIT(pkgIndex.tcl)
AC_CONFIG_HEADER(include/parflow_config.h:config/parflow_config.h.in)

AC_CONFIG_AUX_DIR(../acmacros)

# Get system type.
AC_CANONICAL_SYSTEM

AC_ARG_WITH(CC,
   [  --with-CC=ARG           manually set C compiler to ARG])
AC_ARG_WITH(F77,
   [  --with-F77=ARG          manually set F77 to ARG])
AC_ARG_WITH(F90,
   [  --with-F90=ARG          manually set F90 to ARG])
AC_ARG_WITH(AR,
   [  --with-AR=ARG           manually set AR to ARG])
AC_ARG_WITH(chunk,
   [  --with-chunk            build with Chunk])

dnl
dnl Initialize common macros to empty strings
dnl

C_FLAGS="$CFLAGS"
F77_FLAGS="$FFLAGS"
FC_FLAGS="$FCFLAGS"
LD_FLAGS="$LDFLAGS"
CPP_FLAGS="$CPPFLAGS"

INC_PATH=
LIB_PATH=
LIB_NAME=-lm

LIBS="$LIBS -lm"

LIB_SUFFIX=.a

dnl
dnl Guess the machine architecture and set the variable ARCH
dnl
 
CASC_GUESS_ARCH

dnl
dnl Set up the C compiler.  This macro must come first and be followed
dnl AC_ISC_POSIX before other compiler tests are run.  See the autoconfig
dnl manual for details.
dnl

if test -n "$with_CC"; then
   CC=$with_CC
else
   AC_PROG_CC
   AC_PROG_CC_STDC
fi

AC_PROG_CPP

AC_ISC_POSIX

dnl
dnl Find ar for archiving
dnl 

AC_CHECK_PROGS(AR, $with_AR ar,)
if test -z "$AR"; then
   AC_MSG_ERROR([ar archiver not found - specify with --with-m4=ARG])
fi

dnl
dnl Find install for installing 
dnl

AC_PROG_INSTALL
if test -z "$INSTALL"; then
   AC_MSG_ERROR([install not found])
fi

dnl
dnl Find mkdir for creating directories
dnl

AC_PROG_MKDIR_P
if test -z "$MKDIR_P"; then
   AC_MSG_ERROR([mkdir not found])
fi

# For insure add -Zsl option for linking
case $CC in 
   *insure*)
            LIB_NAME="$LIB_NAME -Zsl"
            ;;
esac

dnl
dnl Define optimize and debug switches.
dnl By default, set no optimization switches and set -g for debug switches.
dnl

AC_ARG_ENABLE(opt,
[  --enable-opt=STRING  Set compiler optimization switches.],
[case "$enable_opt" in
   no) opt_switches="" ;;
   yes) opt_switches="-O2" ;;
   *) opt_switches="$enable_opt" ;;
esac],
opt_switches="-O2"
)

if test -n "$opt_switches" ; then
   C_FLAGS="$opt_switches $C_FLAGS"
   F77_FLAGS="$opt_switches $F77_FLAGS"
   FC_FLAGS="$opt_switches $FC_FLAGS"
fi

AC_ARG_ENABLE(debug,
[  --enable-debug=STRING  Set compiler debug switches.],
[case "$enable_debug" in
   no) debug_switches= ;;
   yes) debug_switches="-g" ;;
   *) debug_switches="$enable_debug" ;;
esac
],
debug_switches="")

if test -n "$debug_switches" ; then
   C_FLAGS="$debug_switches $C_FLAGS"
   F77_FLAGS="$debug_switches $F77_FLAGS"
   FC_FLAGS="$debug_switches $FC_FLAGS"
fi

# Some additional compiler flags
case $CC in
   gcc*)
      C_FLAGS="-Wall $C_FLAGS"
      ;;
   g++*)
      C_FLAGS="-Wall -Wno-write-strings $C_FLAGS"
      ;;
esac

dnl
dnl Set up the Fortran compiler.  Look for special Fortran compilers on
dnl AIX machines.
dnl

if test -n "$with_F77"; then
   dnl If user specifies full path then don't search in path
   if test -f $with_F77; then
      F77=$with_F77
   else
      AC_CHECK_PROGS(F77, $with_F77)
   fi
else
   if test -z "$F77"; then
      AC_CHECK_PROGS(F77, gfortran g77 F77 f77 xlf f2c)
   else
      dnl If F77 was specified then see if it is a full path
      dnl or just the prog name in users PATH
      if test -f $F77; then
	F77=$F77
      else
	AC_CHECK_PROGS(F77, $F77)
      fi
   fi
fi

test -z "$F77" && AC_MSG_ERROR([no acceptable Fortran found in $PATH])

if test "$ac_cv_prog_g77" = "yes"; then
   F77_FLAGS="-Wall -Wimplicit -Wunused $F77_FLAGS"
else
   case $ARCH in
      sun4 | solaris)
         F77_FLAGS="-u $F77_FLAGS"
         ;;
      rs6000)
         F77_FLAGS="-u -qextname $F77_FLAGS"
         ;;
      IRIX64)
         F77_FLAGS="-64 $F77_FLAGS"
         ;;
   esac
fi

dnl
dnl Set up the Fortran libraries.
dnl

case $ARCH in
   IRIX64)
      SAVE_F77="$F77"
      F77="$F77 -64"
      CASC_FIND_F77LIBS
      F77="$SAVE_F77"
      ;;
   ipsc2)
      dnl Manually set stuff for ASCI Red.  This is a hack here
      dnl but did not want to waste more time on a singleton machine
      F77LIBFLAGS="-lpgftnrtl_cgr -lcmplx -lrpc"
      ;;
   rs6000)
      case $F77 in
         *mpxlf*)
	     F77LIBFLAGS="-lxlf90 -lessl $F77LIBFLAGS"
	     ;;
      esac
      ;;
   *)
      CASC_FIND_F77LIBS
      ;;
esac
LIB_NAME="$F77LIBFLAGS $LIB_NAME"

dnl
dnl Fortran 90
dnl
if test -n "$with_F90"; then
   dnl If user specifies full path then don't search in path
   if test -f $with_F90; then
      FC=$with_F90
   else
      AC_CHECK_PROGS(FC, $with_F90)
   fi
else
   if test -z "$F90"; then
      AC_PROG_FC(, Fortran 90)
   else
      dnl If F90 was specified then see if it is a full path
      dnl or just the prog name in users PATH
      if test -f $F90; then
	FC=$F90
      else
	AC_CHECK_PROGS(FC, $F90)
      fi
   fi
fi
test -z "$FC" && AC_MSG_ERROR([no acceptable Fortran 90 found])
AC_SUBST(FC)

AC_FC_FREEFORM(,[AC_MSG_ERROR([free format in F90 compiler does not work])])

case $FC in
   gfortran) 
      FC_FLAGS="$FC_FLAGS $FCFLAGS -ffree-line-length-none"
      ;;
esac

CASC_FC_ACCESS_STREAM

CASC_FC_ACCESS_SEQUENTIAL

if test "$casc_cv_fc_access_stream" = "yes"; then
   AC_SUBST(PARFLOW_FC_ACCESS,stream)
   AC_SUBST(PARFLOW_FC_FORM,unformatted)
else
   if test "$casc_cv_fc_access_sequential" = "yes"; then
      AC_SUBST(PARFLOW_FC_ACCESS,["sequential"])
      AC_SUBST(PARFLOW_FC_FORM,["binary"])
   else
   AC_MSG_ERROR([Unable to determine syntax to use for Fortran binary files])
   fi
fi

dnl
dnl Find the X11 include directory, library directory, and associated
dnl libraries.
dnl

if test "${with_x+set}" = set; then
   AC_PATH_XTRA
   if test "yes" = "$no_x"; then
      AC_MSG_NOTICE([NOTIFICATION: Parflow configured without the X11 library])
      AC_DEFINE(LACKS_X11)
   else
      AC_DEFINE(HAVE_X11)
      X_LIBS=`echo $X_LIBS | sed 's/-R\//-R \//'`
      if test -n "$x_includes"; then
         INC_PATH="-I$x_includes $INC_PATH"
      fi
      LIB_PATH="$X_LIBS $LIB_PATH"
      LIB_NAME="$X_PRE_LIBS -lX11 $X_EXTRA_LIBS $LIB_NAME"
   fi
else
   AC_MSG_NOTICE([NOTIFICATION: Parflow configured without the X11 library])
   AC_DEFINE(LACKS_X11)
fi

dnl
dnl Check if malloc.h is present
dnl
AC_CHECK_HEADER(malloc.h,AC_DEFINE(HAVE_MALLOC_H))

dnl
dnl Checking for mallinfo
dnl
AC_MSG_CHECKING(for mallinfo)
AC_TRY_COMPILE([#include <malloc.h>], void *x=mallinfo,
  AC_DEFINE(HAVE_MALLINFO, 1, Define if you have the 'mallinfo' function.)
  AC_MSG_RESULT(yes),
  AC_MSG_RESULT(no)
)

dnl dnl
dnl dnl Set up the Fortran libraries.
dnl dnl
AC_F77_LIBRARY_LDFLAGS
CASC_SPLIT_LIBS_STRING(FLIBS,FLIBS_PATH,FLIBS_NAME)
LIB_NAME="${LIB_NAME} ${FLIBS_NAME}"
LIB_PATH="${LIB_PATH} ${FLIBS_PATH}"

CASC_CHECK_BIGENDIAN

CASC_SUPPORT_AMPS

dnl
dnl Tcl support
dnl
CASC_SUPPORT_TCL
if test "${tcl_PREFIX+set}" = set; then
  LIBS="$tcl_LIBS $LIBS"
  CASC_SPLIT_LIBS_STRING(tcl_LIBS,tcl_LIB_PATH,tcl_LIB_NAME)
  LIB_PATH="$tcl_LIB_PATH $LIB_PATH"
  LIB_NAME="$tcl_LIB_NAME $LIB_NAME"
  INC_PATH="$tcl_INCLUDES $INC_PATH"

  SH_LIB_PATH="$tcl_LIB_PATH $SH_LIB_PATH"
  SH_LIB_NAME="$tcl_LIB_NAME $SH_LIB_NAME"
  SH_INC_PATH="$tcl_INCLUDES $SH_INC_PATH"
  AC_DEFINE(HAVE_TCL,1,TCL library is available so use it)
fi

dnl
dnl Support linking with Z lib if HDF requires it
dnl
CHECK_ZLIB()
CASC_SPLIT_LIBS_STRING(zlib_LIBS,zlib_LIB_PATH,zlib_LIB_NAME)
LIB_PATH="$zlib_LIB_PATH $LIB_PATH"
LIB_NAME="$zlib_LIB_NAME $LIB_NAME"
INC_PATH="$zlib_INCLUDES $INC_PATH"
AC_SUBST(zlib_LIBS)

dnl
dnl Support linking with SZ lib if HDF requires it
dnl
CHECK_SZLIB()
CASC_SPLIT_LIBS_STRING(szlib_LIBS,szlib_LIB_PATH,szlib_LIB_NAME)
LIB_PATH="$szlib_LIB_PATH $LIB_PATH"
LIB_NAME="$szlib_LIB_NAME $LIB_NAME"
INC_PATH="$szlib_INCLUDES $INC_PATH"
AC_SUBST(szlib_LIBS)

AC_SUBST(PARFLOW_HAVE_SILO)
dnl
dnl Set variables for hdf5 support
dnl
CASC_SUPPORT_HDF5
if test "${hdf5_PREFIX+set}" = set; then
  LIBS="$hdf5_LIBS $LIBS"
  CASC_SPLIT_LIBS_STRING(hdf5_LIBS,hdf5_LIB_PATH,hdf5_LIB_NAME)
  LIB_PATH="$hdf5_LIB_PATH $LIB_PATH"
  LIB_NAME="$hdf5_LIB_NAME $LIB_NAME"
  INC_PATH="$hdf5_INCLUDES $INC_PATH"
  AC_DEFINE(HAVE_HDF5,1,HDF5 library is available so use it)
fi
AC_SUBST(hdf5_LIBS)

dnl
dnl Silo support
dnl
PARFLOW_HAVE_SILO="no"
CASC_SUPPORT_SILO
if test "${silo_PREFIX+set}" = set; then
  LIBS="$silo_LIBS $LIBS"
  CASC_SPLIT_LIBS_STRING(silo_LIBS,silo_LIB_PATH,silo_LIB_NAME)
  LIB_PATH="$silo_LIB_PATH $LIB_PATH"
  LIB_NAME="$silo_LIB_NAME $LIB_NAME"
  INC_PATH="$silo_INCLUDES $INC_PATH"
  AC_DEFINE(HAVE_SILO,1,SILO library is available so use it)
  PARFLOW_HAVE_SILO="yes"
fi
AC_SUBST(silo_LIBS)

dnl
dnl Chunk Support
dnl
dnl CHUNK_DIR is empty when not building with Chunk.  This will case the
dnl directory to be skipped in the compilation.
CHUNK_DIR=""
PARFLOW_HAVE_CHUNK="no"
if test "$with_chunk" = "yes"; then
   PARFLOW_HAVE_CHUNK="yes"
   CHUNK_DIR="chunk"
   AC_DEFINE(HAVE_CHUNK)	  
fi
AC_SUBST(CHUNK_DIR)
AC_SUBST(PARFLOW_HAVE_CHUNK)

debug_ext=debug
if test "$enable_opt" = "yes"; then
   if test "$enable_debug" = "yes"; then
      debug_ext=optdebug
   else
      debug_ext=opt
   fi
fi

if test "$prefix" = "NONE"; then
   dir_place_holder=`pwd`
   cd $srcdir/..
   prefix=`pwd`
   cd $dir_place_holder
fi

INSTDIR=$prefix

AX_C_CHECK_FLAG(-shared,,,
	CC_HAS_SHARED="yes";CC_SHARED_FLAG="-shared",
	CC_HAS_SHARED="no";CC_SHARED_FLAC="")	

# SGS This could be done better but just test on OS for now
case "$host_os" in
  darwin*)
    SHLIB_SUFFIX=".dylib"
    SHLIB_LD="ld -dylib"
    ;;
  cygwin*)
    SHLIB_SUFFIX=".dll"
    if test "$CC_HAS_SHARED" = "yes"; then
        SHLIB_LD="$CC -shared"
    else
        SHLIB_LD="ld -shared"
    fi
    ;;
  *) 
    SHLIB_SUFFIX=".so"
    if test "$CC_HAS_SHARED" = "yes"; then
        SHLIB_LD="$CC -shared"
    else
        SHLIB_LD="ld -shared"
    fi
    ;;
esac

AC_SUBST(SHLIB_SUFFIX)
AC_SUBST(SHLIB_LD)

dnl
dnl Check some shared library building options
dnl This would be better to replace with a full 
dnl shared library building package but don't
dnl have time just yet.
dnl

AX_C_CHECK_FLAG(-fPIC,,,SHLIB_CFLAGS="-fPIC",)	
if test "$SHLIB_CFLAGS" = ""; then 
   AX_C_CHECK_FLAG(-fpic,,,SHLIB_CFLAGS="-fpic",)	
fi
AC_SUBST(SHLIB_CFLAGS)

dnl
dnl Make all of the macro substitutions for the generated output files
dnl

AC_SUBST(ARCH)
AC_SUBST(INSTDIR)

AC_SUBST(M4)
AC_SUBST(AR)
AC_SUBST(XARGS)

AC_SUBST(F77)
AC_SUBST(F77_FLAGS)
AC_SUBST(F77LIBFLAGS)

AC_SUBST(CC)
AC_SUBST(C_FLAGS)
AC_SUBST(LD_FLAGS)

AC_SUBST(LIB_SUFFIX)

AC_SUBST(SRCDIR_COMPILE_PREFIX)
AC_SUBST(INC_PATH)
AC_SUBST(LIB_PATH)
AC_SUBST(LIB_NAME)

AC_SUBST(SH_INC_PATH)
AC_SUBST(SH_LIB_PATH)
AC_SUBST(SH_LIB_NAME)

dnl
dnl Generate the output files.
dnl

dnl Find all Makefile.in and associated subdirectories.  
subdirs=`cd $srcdir; find . -name Makefile.in -print | sed 's%/Makefile.in$%%g' | sort `
makefiles=
for i in $subdirs; do makefiles="$makefiles $i/Makefile"; done
$MKDIR_P $subdirs
$MKDIR_P lib 
$MKDIR_P bin

AC_OUTPUT([
Makefile
config/Makefile.config 
chunk/code/chunk.f
${makefiles}
],[
dnl These are the commands that will execute after the file generations.
dnl They are run by the generated config.status script.

rm -rf Templates.DB ti_files ii_files

$MKDIR_P config include lib bin $subdirs

],
[

dnl These commands set the environment for commands executing
dnl after file generations.
srcdir=$srcdir
subdirs="$subdirs"
sundials_dir=$sundials_dir
if test ! `cd $srcdir && pwd -P` = `pwd -P`; then
  source_tree_is_not_compile_tree=1
fi
]

)
